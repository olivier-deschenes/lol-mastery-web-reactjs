/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MatchRouteImport } from './routes/match'
import { Route as RegionRouteRouteImport } from './routes/$region/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RegionSIndexRouteImport } from './routes/$region/s/index'
import { Route as RegionMIndexRouteImport } from './routes/$region/m/index'
import { Route as RegionSSummonerNameRouteImport } from './routes/$region/s/$summonerName'

const MatchRoute = MatchRouteImport.update({
  id: '/match',
  path: '/match',
  getParentRoute: () => rootRouteImport,
} as any)
const RegionRouteRoute = RegionRouteRouteImport.update({
  id: '/$region',
  path: '/$region',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegionSIndexRoute = RegionSIndexRouteImport.update({
  id: '/s/',
  path: '/s/',
  getParentRoute: () => RegionRouteRoute,
} as any)
const RegionMIndexRoute = RegionMIndexRouteImport.update({
  id: '/m/',
  path: '/m/',
  getParentRoute: () => RegionRouteRoute,
} as any)
const RegionSSummonerNameRoute = RegionSSummonerNameRouteImport.update({
  id: '/s/$summonerName',
  path: '/s/$summonerName',
  getParentRoute: () => RegionRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$region': typeof RegionRouteRouteWithChildren
  '/match': typeof MatchRoute
  '/$region/s/$summonerName': typeof RegionSSummonerNameRoute
  '/$region/m': typeof RegionMIndexRoute
  '/$region/s': typeof RegionSIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$region': typeof RegionRouteRouteWithChildren
  '/match': typeof MatchRoute
  '/$region/s/$summonerName': typeof RegionSSummonerNameRoute
  '/$region/m': typeof RegionMIndexRoute
  '/$region/s': typeof RegionSIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$region': typeof RegionRouteRouteWithChildren
  '/match': typeof MatchRoute
  '/$region/s/$summonerName': typeof RegionSSummonerNameRoute
  '/$region/m/': typeof RegionMIndexRoute
  '/$region/s/': typeof RegionSIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$region'
    | '/match'
    | '/$region/s/$summonerName'
    | '/$region/m'
    | '/$region/s'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$region'
    | '/match'
    | '/$region/s/$summonerName'
    | '/$region/m'
    | '/$region/s'
  id:
    | '__root__'
    | '/'
    | '/$region'
    | '/match'
    | '/$region/s/$summonerName'
    | '/$region/m/'
    | '/$region/s/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RegionRouteRoute: typeof RegionRouteRouteWithChildren
  MatchRoute: typeof MatchRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/match': {
      id: '/match'
      path: '/match'
      fullPath: '/match'
      preLoaderRoute: typeof MatchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$region': {
      id: '/$region'
      path: '/$region'
      fullPath: '/$region'
      preLoaderRoute: typeof RegionRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$region/s/': {
      id: '/$region/s/'
      path: '/s'
      fullPath: '/$region/s'
      preLoaderRoute: typeof RegionSIndexRouteImport
      parentRoute: typeof RegionRouteRoute
    }
    '/$region/m/': {
      id: '/$region/m/'
      path: '/m'
      fullPath: '/$region/m'
      preLoaderRoute: typeof RegionMIndexRouteImport
      parentRoute: typeof RegionRouteRoute
    }
    '/$region/s/$summonerName': {
      id: '/$region/s/$summonerName'
      path: '/s/$summonerName'
      fullPath: '/$region/s/$summonerName'
      preLoaderRoute: typeof RegionSSummonerNameRouteImport
      parentRoute: typeof RegionRouteRoute
    }
  }
}

interface RegionRouteRouteChildren {
  RegionSSummonerNameRoute: typeof RegionSSummonerNameRoute
  RegionMIndexRoute: typeof RegionMIndexRoute
  RegionSIndexRoute: typeof RegionSIndexRoute
}

const RegionRouteRouteChildren: RegionRouteRouteChildren = {
  RegionSSummonerNameRoute: RegionSSummonerNameRoute,
  RegionMIndexRoute: RegionMIndexRoute,
  RegionSIndexRoute: RegionSIndexRoute,
}

const RegionRouteRouteWithChildren = RegionRouteRoute._addFileChildren(
  RegionRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RegionRouteRoute: RegionRouteRouteWithChildren,
  MatchRoute: MatchRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
