/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as PlatformRouteRouteImport } from './routes/$platform/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UserIndexRouteImport } from './routes/user/index'
import { Route as MasteryIndexRouteImport } from './routes/mastery/index'
import { Route as UserRiotIdsRouteImport } from './routes/user/riot-ids'
import { Route as PlatformSIdRouteImport } from './routes/$platform/s.$id'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const PlatformRouteRoute = PlatformRouteRouteImport.update({
  id: '/$platform',
  path: '/$platform',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIndexRoute = UserIndexRouteImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => rootRouteImport,
} as any)
const MasteryIndexRoute = MasteryIndexRouteImport.update({
  id: '/mastery/',
  path: '/mastery/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserRiotIdsRoute = UserRiotIdsRouteImport.update({
  id: '/user/riot-ids',
  path: '/user/riot-ids',
  getParentRoute: () => rootRouteImport,
} as any)
const PlatformSIdRoute = PlatformSIdRouteImport.update({
  id: '/s/$id',
  path: '/s/$id',
  getParentRoute: () => PlatformRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$platform': typeof PlatformRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/user/riot-ids': typeof UserRiotIdsRoute
  '/mastery': typeof MasteryIndexRoute
  '/user': typeof UserIndexRoute
  '/$platform/s/$id': typeof PlatformSIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$platform': typeof PlatformRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/user/riot-ids': typeof UserRiotIdsRoute
  '/mastery': typeof MasteryIndexRoute
  '/user': typeof UserIndexRoute
  '/$platform/s/$id': typeof PlatformSIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$platform': typeof PlatformRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/user/riot-ids': typeof UserRiotIdsRoute
  '/mastery/': typeof MasteryIndexRoute
  '/user/': typeof UserIndexRoute
  '/$platform/s/$id': typeof PlatformSIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$platform'
    | '/privacy'
    | '/terms'
    | '/user/riot-ids'
    | '/mastery'
    | '/user'
    | '/$platform/s/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$platform'
    | '/privacy'
    | '/terms'
    | '/user/riot-ids'
    | '/mastery'
    | '/user'
    | '/$platform/s/$id'
  id:
    | '__root__'
    | '/'
    | '/$platform'
    | '/privacy'
    | '/terms'
    | '/user/riot-ids'
    | '/mastery/'
    | '/user/'
    | '/$platform/s/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlatformRouteRoute: typeof PlatformRouteRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  UserRiotIdsRoute: typeof UserRiotIdsRoute
  MasteryIndexRoute: typeof MasteryIndexRoute
  UserIndexRoute: typeof UserIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$platform': {
      id: '/$platform'
      path: '/$platform'
      fullPath: '/$platform'
      preLoaderRoute: typeof PlatformRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/': {
      id: '/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mastery/': {
      id: '/mastery/'
      path: '/mastery'
      fullPath: '/mastery'
      preLoaderRoute: typeof MasteryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/riot-ids': {
      id: '/user/riot-ids'
      path: '/user/riot-ids'
      fullPath: '/user/riot-ids'
      preLoaderRoute: typeof UserRiotIdsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$platform/s/$id': {
      id: '/$platform/s/$id'
      path: '/s/$id'
      fullPath: '/$platform/s/$id'
      preLoaderRoute: typeof PlatformSIdRouteImport
      parentRoute: typeof PlatformRouteRoute
    }
  }
}

interface PlatformRouteRouteChildren {
  PlatformSIdRoute: typeof PlatformSIdRoute
}

const PlatformRouteRouteChildren: PlatformRouteRouteChildren = {
  PlatformSIdRoute: PlatformSIdRoute,
}

const PlatformRouteRouteWithChildren = PlatformRouteRoute._addFileChildren(
  PlatformRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlatformRouteRoute: PlatformRouteRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  UserRiotIdsRoute: UserRiotIdsRoute,
  MasteryIndexRoute: MasteryIndexRoute,
  UserIndexRoute: UserIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
